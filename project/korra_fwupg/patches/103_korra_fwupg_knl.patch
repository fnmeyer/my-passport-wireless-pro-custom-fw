diff -Nur linux-kernel/drivers/usb/core/hub.c linux-custom/drivers/usb/core/hub.c
--- linux-kernel/drivers/usb/core/hub.c	2015-06-24 21:40:06.597029534 +0800
+++ linux-custom/drivers/usb/core/hub.c	2015-06-24 21:54:02.950594896 +0800
@@ -4133,34 +4133,9 @@
 
 	/* Reset the device; full speed may morph to high speed */
 	/* FIXME a USB 2.0 device may morph into SuperSpeed on reset. */
-	//hcy test below
-	if ( r_flag && !(udev->quirks & USB_QUIRK_U3_RESET)) {
-		retval = -ENODEV;
-		goto fail;
-	}
-
-	if ( r_flag && udev->speed == USB_SPEED_SUPER && udev->quirks & USB_QUIRK_U3_RESET ) {
- 
-		msleep(10);
-		usb_hub_set_port_power(hdev, port1, false);
-		usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_CONNECTION);
-		usb_clear_port_feature(hdev, port1,     USB_PORT_FEAT_C_ENABLE);
-		msleep(100);
-				
-		retval = usb_hub_set_port_power(hdev, port1, true);
-	//	if (!retval)
-	//		hub_port_debounce_be_connected(hub, port1);
-		usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_ENABLE);
-		retval = hub_port_reset(hub, port1, udev, delay, false);
-
-
-	}
-	else 
-		retval = hub_port_reset(hub, port1, udev, delay, false);
-
-
+	retval = hub_port_reset(hub, port1, udev, delay, false);
 	if (retval < 0) {		/* error or disconnect */
-		goto fail_reset;
+		goto fail;
 	}
 	/* success, speed is known */
 	retval = -ENODEV;
@@ -4255,7 +4230,7 @@
 			 */
 			for (j = 0; j < 3; ++j) {
 				buf->bMaxPacketSize0 = 0;
-				msleep(100); //hcy 20160107
+				//msleep(100); //hcy 20160107
 				r = usb_control_msg(udev, usb_rcvaddr0pipe(),
 					USB_REQ_GET_DESCRIPTOR, USB_DIR_IN,
 					USB_DT_DEVICE << 8, 0,
@@ -4293,24 +4268,7 @@
 			if (r) {
 				if (r != -ENODEV) 
 					dev_err(&udev->dev, "device descriptor read/64, error %d\n",
-							r);
-				//hcy added below 
-				printk("%s %d clear-set port power \n", __func__,__LINE__); 
-				usb_hub_set_port_power(hdev, port1, false);
-				usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_CONNECTION);
-			        usb_clear_port_feature(hdev, port1,     USB_PORT_FEAT_C_ENABLE);
-				msleep(100);
-				
-				retval = usb_hub_set_port_power(hdev, port1, true);
-			
-				if (!retval)
-					hub_port_debounce_be_connected(hub, port1);
-				usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_ENABLE);
-				msleep(100);
-				hub_port_reset(hub, port1, udev, delay, false);
-
-				//hcy added above
-					
+							r);					
 				retval = -EMSGSIZE;
 				continue;
 			}
@@ -4328,8 +4286,6 @@
 				retval = hub_set_address(udev, devnum);
 				if (retval >= 0)
 					break;
-				if( r_flag && udev->speed == USB_SPEED_SUPER && udev->quirks & USB_QUIRK_U3_RESET )       //hcy added
-					break;
 				msleep(200);
 			}
 			if (retval < 0) {
@@ -4362,27 +4318,6 @@
 				dev_err(&udev->dev,
 					"device descriptor read/8, error %d\n",
 					retval);
-
-			//hcy added below 
-			printk("%s %d clear-set port power \n", __func__,__LINE__);
-			usb_hub_set_port_power(hdev, port1, false);
-			usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_CONNECTION);
-		        usb_clear_port_feature(hdev, port1,     USB_PORT_FEAT_C_ENABLE);
-			msleep(100);
-			
-			retval = usb_hub_set_port_power(hdev, port1, true);
-			
-			if (!retval)
-				hub_port_debounce_be_connected(hub, port1);
-			usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_ENABLE);
-			msleep(100);
-			hub_port_reset(hub, port1, udev, delay, false);
-
-
-			//hcy added above
-
-
-
 			if (retval >= 0)
 				retval = -EMSGSIZE;
 		} else {
@@ -4457,38 +4392,7 @@
 		hcd->driver->update_device(hcd, udev);
 fail:
 	if (retval) {
-		//hcy added below //
-		int ret;	
-
-		usb_hub_set_port_power(hdev, port1, false);
-		usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_CONNECTION);
-	        usb_clear_port_feature(hdev, port1,     USB_PORT_FEAT_C_ENABLE);
-		msleep(100);
-			
-		ret = usb_hub_set_port_power(hdev, port1, true);
-			
-	//	if (!ret)
-	//		hub_port_debounce_be_connected(hub, port1);
-		usb_clear_port_feature(hdev, port1, USB_PORT_FEAT_C_ENABLE);
-		msleep(100);
-
-		hub_port_reset(hub, port1, udev, delay, false);
-fail_reset:
-		ret = hub_port_disable(hub, port1, 0); 
-		if (retval && retval != -ENODEV) {
-			struct device_node *specific_rst_node;
-			unsigned int rst_gpio;
-
-			dev_err(&hdev->dev, "%s %d bad device  !?\n", __func__,__LINE__);
-
-			/* ............ */			
-				
-		}
-		//hcy added above 
-
-			
-
-
+		hub_port_disable(hub, port1, 0);
 		update_devnum(udev, devnum);	/* for disconnect processing */
 	}
 	mutex_unlock(&usb_address0_mutex);
@@ -4837,32 +4741,6 @@
 
 			}
 
-#if 0
-			for (i = 0; i < udev->actconfig->desc.bNumInterfaces; i++) {
-				struct usb_host_config *config = udev->actconfig;
-				struct usb_interface *intf = config->interface[i];
-				struct usb_interface_descriptor *desc;
-				desc = &intf->cur_altsetting->desc;
-
-				dev_dbg(&udev->dev , "bInterfaceClass = %d \n",  desc->bInterfaceClass);//hcy test
-				if (desc->bInterfaceClass == USB_CLASS_MASS_STORAGE){
-					usb_storage = 1;
-					break;
-				}
-			}	
-			}
-
-
-			if (!status && (usb_storage || udev->descriptor.bDeviceClass ==USB_CLASS_MASS_STORAGE))
-			{				
-				msleep(100);
-				dev_err(&udev->dev , "%s unbind-probe dev_name = %s jiffies= 0x%2x\n", __func__, dev_name(&udev->dev), jiffies - INITIAL_JIFFIES );
-				usb_unbind_device(&udev->dev);
-				
-				usb_probe_device(&udev->dev);
-			}
-			// hcy added above 
-#endif
 			if (status) {
 				spin_lock_irq(&device_state_lock);
 				hub->ports[port1 - 1]->child = NULL;
@@ -5570,14 +5448,6 @@
 		return -EINVAL;
 	}
 	usb_detect_quirks(udev);
-        if (udev->quirks & USB_QUIRK_U3_RESET && udev->speed == USB_SPEED_SUPER) {   //hcy added
-		dev_err(&udev->dev, "%s quirk device u3 reset \n.",
-				__func__);
-
-		r_flag = 1;
-	}
-
-
 	/*
 	 * Don't allocate memory with GFP_KERNEL in current
 	 * context to avoid possible deadlock if usb mass
@@ -5634,14 +5504,7 @@
 
 	usb_autosuspend_device(udev);
 	memalloc_noio_restore(noio_flag);
-        if (udev->quirks & USB_QUIRK_U3_RESET && udev->speed == USB_SPEED_SUPER) {   //hcy added
-		r_flag = 0;
-		dev_err(&udev->dev, "%s quirk device u3 exit reset \n.",
-				__func__);
-
-	}
-
-
+  
 	return ret;
 }
 EXPORT_SYMBOL_GPL(usb_reset_device);
diff -Nur linux-kernel/drivers/usb/core/quirks.c linux-custom/drivers/usb/core/quirks.c
--- linux-kernel/drivers/usb/core/quirks.c	2015-06-24 21:40:06.597029534 +0800
+++ linux-custom/drivers/usb/core/quirks.c	2015-06-24 21:54:37.970794567 +0800
@@ -151,7 +151,7 @@
 	{ USB_DEVICE(0x8086, 0xf1a5), .driver_info = USB_QUIRK_RESET_RESUME },
 
 	/* RTK WiFi dongle ; hcy added */
-	{ USB_DEVICE(0x0bda, 0x8813), .driver_info = USB_QUIRK_U3_RESET },
+//	{ USB_DEVICE(0x0bda, 0x8813), .driver_info = USB_QUIRK_U3_RESET },
 
 	/* RTK 5411 hub ; hcy added */
 	{ USB_DEVICE(0x0bda, 0x0411), .driver_info = USB_QUIRK_DEVICE_PROBE },
diff -Nur linux-kernel/drivers/usb/core/usb.c linux-custom/drivers/usb/core/usb.c
--- linux-kernel/drivers/usb/core/usb.c	2015-06-24 21:40:06.481029512 +0800
+++ linux-custom/drivers/usb/core/usb.c	2015-06-24 21:55:14.252679079 +0800
@@ -1028,7 +1028,7 @@
 		pr_info("%s: USB support disabled\n", usbcore_name);
 		return 0;
 	}
-
+	
 	retval = usb_debugfs_init();
 	if (retval)
 		goto out;
diff -Nur linux-kernel/drivers/usb/host/xhci-mem.c linux-custom/drivers/usb/host/xhci-mem.c
--- linux-kernel/drivers/usb/host/xhci-mem.c	2015-06-24 21:40:06.965029498 +0800
+++ linux-custom/drivers/usb/host/xhci-mem.c	2015-06-24 21:56:41.121972195 +0800
@@ -1005,6 +1005,35 @@
 	virt_dev = xhci->devs[udev->slot_id];
 	ep0_ctx = xhci_get_ep_ctx(xhci, virt_dev->in_ctx, 0);
 	ep_ring = virt_dev->eps[0].ring;
+
+	/*
+	Fixed : USB reset issue, which will cause set address fail.
+	*/
+	{
+		int i = 0;
+		struct xhci_ring *ring = ep_ring;
+		union xhci_trb *next;
+		union xhci_trb *trb;
+		
+		ring->enq_seg = ring->first_seg;
+		ring->enqueue = ring->first_seg->trbs;
+		next = ring->enqueue;
+
+		wmb();
+		for (i = 0; i < (TRBS_PER_SEGMENT); i++) {
+			trb = &ring->first_seg->trbs[i];
+			trb->generic.field[3] &= cpu_to_le32(~TRB_CYCLE);
+		}
+
+		for (i = 0; i < (TRBS_PER_SEGMENT); i++) {
+			trb = &ring->first_seg->next->trbs[i];
+			trb->generic.field[3] &= cpu_to_le32(~TRB_CYCLE);
+		}
+
+		ring->cycle_state = 1;
+		wmb();
+	}
+
 	/*
 	 * FIXME we don't keep track of the dequeue pointer very well after a
 	 * Set TR dequeue pointer, so we're setting the dequeue pointer of the
diff -Nur linux-kernel/drivers/usb/phy/phy-rtk-rle0599.c linux-custom/drivers/usb/phy/phy-rtk-rle0599.c
--- linux-kernel/drivers/usb/phy/phy-rtk-rle0599.c	2015-06-24 21:40:06.669029470 +0800
+++ linux-custom/drivers/usb/phy/phy-rtk-rle0599.c	2015-06-24 21:57:46.454961805 +0800
@@ -45,17 +45,17 @@
 #define PHY_IO_TIMEOUT_MSEC		(50)
 
 static struct rtk_usb_phy_data_s phy_page0_default_setting[] = {
-	{0xe0, 0x61},
-	{0xe0, 0xe1},
+	{0xe0, 0xa1},	
 	{0xe2, 0x9a},
 	{0xe4, 0xd6},
 	{0xe5, 0x1d},
 	{0xe6, 0xc0},
+	{0xe7, 0xb1},
 	{0xf1, 0x9c},
 };
 
 static struct rtk_usb_phy_data_s phy_page1_default_setting[] = {
-	{0xe0, 0x25},
+	{0xe0, 0x35},
 	{0xe1, 0xaf},
 };
 
diff -Nur linux-kernel/drivers/usb/phy/phy-rtk-usb2.c linux-custom/drivers/usb/phy/phy-rtk-usb2.c
--- linux-kernel/drivers/usb/phy/phy-rtk-usb2.c	2015-06-24 21:40:06.673029488 +0800
+++ linux-custom/drivers/usb/phy/phy-rtk-usb2.c	2015-06-24 21:58:26.836068060 +0800
@@ -41,17 +41,17 @@
 #define phy_read(addr)			__raw_readl(addr)
 
 static struct rtk_usb_phy_data_s phy_page0_default_setting[] = {
-	{0xe0, 0x61},
-	{0xe0, 0xe1},
+	{0xe0, 0xa1},	
 	{0xe2, 0x9a},
 	{0xe4, 0xd6},
 	{0xe5, 0x1d},
 	{0xe6, 0xc0},
+	{0xe7, 0xb1},
 	{0xf1, 0x9c},
 };
 
 static struct rtk_usb_phy_data_s phy_page1_default_setting[] = {
-	{0xe0, 0x25},
+	{0xe0, 0x35},
 	{0xe1, 0xaf},
 };
 
