#!/bin/sh
# This script is used to replace hotplug for NAS

PATH=/sbin:/usr/sbin:/bin:/usr/bin

FNAME="[nas-loader_a]"

DIRP="/tmp/usbmounts"
DIRH="/tmp/hddmounts"
HiddenV1=none
HiddenV2=none
HiddenV3=none
#RecoveryFWversion
RecoveryFWversion=none

exit_update()
{
    echo "$1"
    exit
}

upgrade(){
    tar xvf $1 updatefw -C /tmp
    tar xvf $1 fw.version -C /tmp
    
    updateVersion=`cat /tmp/fw.version`
    echo "updateVersion" $updateVersion
    updateMinorVersion=`echo $updateVersion | awk -F. '{print $2}'`
    echo "updateMinorVersion" $updateMinorVersion
    RecoverMinorVersion=`echo $RecoveryFWversion | awk -F. '{print $2}'`
    echo "RecoverMinorVersion" $RecoverMinorVersion
    
    if [ "${updateMinorVersion}" -ge "${RecoverMinorVersion}" ]; then
		/tmp/updatefw $1 \
    	&& return 0
	fi
    
    return 1
}

check_recoveryFW_version()
{
	mount -t ext4 /dev/${HiddenV1}1 /mnt
	if [ ! -f "/etc/FactoryFwVer" ]; then
		RecoveryFWversion=`ls /mnt/MyPassport* | awk -F\/ '{print $NF}'`
		if [ "${RecoveryFWversion}" == "" ]; then
			RecoveryFWversion="0.0.0"
		fi
		echo "RecoveryFWversion: "$RecoveryFWversion" "
	else
		tmpRFWV=`cat /etc/FactoryFwVer`
		if [ "$tmpRFWV" == "none" ]; then
			RecoveryFWversion=`ls /mnt/MyPassport* | awk -F\/ '{print $NF}'`
			echo "get RecoveryFWversion again: "$RecoveryFWversion" "
		else
			echo "Recovery fw version exist "$tmpRFWV" "
			RecoveryFWversion="$tmpRFWV"
		fi
	fi
	umount /mnt
}

probe_hdd()
{
    vol=0
    for diskV in /sys/block/sd*; do
        vendor=`cat $diskV/device/vendor | awk '{print $1}'`
        model=`cat $diskV/device/model`
        #Temp for Korra and Korra Lite
        [ "$model" == "My Passport 25AF" ] && HDD_MODEL="My Passport 25AF"
        [ "$model" == "My Passport 2601" ] && HDD_MODEL="My Passport 2601"
        if [ "$vendor" == "WD" ] && [ "$model" == "$HDD_MODEL" ]; then
            size=`cat $diskV/size`
            if [ $size -gt 4194304 ]; then
                UserV=$diskV
                echo "$diskV is user space"
                #echo "/dev/${UserV}" > /tmp/HDDDevNode
            else
                #[ $minor -eq 0 ] && UserV=$diskV && echo "$diskV is user space"
                vol=`expr $vol + 1`
                [ $vol -eq 1 ] && HiddenV1=`echo $diskV | cut -d "/" -f 4`
                [ $vol -eq 2 ] && HiddenV2=`echo $diskV | cut -d "/" -f 4`
                [ $vol -eq 3 ] && HiddenV3=`echo $diskV | cut -d "/" -f 4`
            fi
        fi
    done
}

format_hdd()
{
    echo "Formating...$2 to $1"
    [ $1 == "ext4" ] && mkfs.ext4 /dev/$2
    [ $1 == "vfat" ] && mkfs.fat /dev/$2
}

check_def_HWcollect_part()
{
    if [ "$1" == "none" ]; then
        exit_update "def_HwCollect part incorrect, fix it"
    fi
    partNo=`ls -l /dev/"$1"* | wc -l`
    partSize=`cat /proc/partitions | grep "$1"1 | grep 524288 | wc -l`
    if [ $partNo -eq 3 ] && [ $partSize -eq 1 ]; then
        fsType_1=`blkid /dev/"$1"1 | grep ext4 | wc -l`
        if [ $fsType_1 -eq 1 ] ; then
            echo "Def Part: ${1}1, Type:EXT4 $1"
        else
            format_hdd ext4 ${1}1
        fi
        fsType_2=`blkid /dev/"$1"2 | grep ext4 | wc -l`
        if [ $fsType_2 -eq 1 ] ; then
            echo "def_HwCollect Part: ${1}2, Type:EXT4 $1"
        else
            format_hdd ext4 ${1}2
        fi
    else
        dd if=/dev/zero of=/dev/$1 bs=1M
        sync
        (echo n;echo p;echo 1;echo;echo +512M;echo n;echo p;echo 2;echo;echo;echo w) | fdisk /dev/$1
        sync
        sync
        sync
        format_hdd ext4 ${1}1
	format_hdd ext4 ${1}2
    fi

}

check_knl_part()
{
    if [ "$1" == "none" ]; then
        exit_update "knl part incorrect, fix it"
    fi
    partNo=`ls -l /dev/"$1"* | wc -l`
    partSize=`cat /proc/partitions | grep "$1"1 | grep 524288 | wc -l`
    if [ $partNo -eq 3 ] && [ $partSize -eq 1 ]; then
        fsType=`blkid /dev/"$1"1 | grep vfat | wc -l`
        if [ $fsType -eq 1 ] ; then
            echo "Kernel Part: $1, Type:VFAT $1"
        else
            format_hdd vfat ${1}1
        fi
    else
        dd if=/dev/zero of=/dev/$1 bs=1M
        sync
        (echo n;echo p;echo 1;echo;echo +512M;echo n;echo p;echo 2;echo;echo;echo w) | fdisk /dev/$1
        sync
        sync
        sync
        format_hdd vfat ${1}1
    fi
}

check_sys_part()
{
    if [ "$1" == "none" ]; then
        exit_update "sys part incorrect, fix it"
    fi
    partNo=`ls -l /dev/"$1"* | wc -l`
    if [ $partNo -eq 3 ]; then
        fsType1=`blkid /dev/"$1"1 | grep ext4 | wc -l`
        if [ $fsType1 -eq 1 ] ; then
            echo "System Part: ${1}1, Type: EXT4"
        else
            format_hdd ext4 ${1}1
        fi
        fsType2=`blkid /dev/"$1"2 | grep ext4 | wc -l`
        if [ $fsType2 -eq 1 ] ; then
            echo "System Part: ${1}2, Type:EXT4"
        else
            format_hdd ext4 ${1}2
        fi

    else
        dd if=/dev/zero of=/dev/$1 bs=1M
        sync
        (echo n;echo p;echo 1;echo;echo +1024M;echo n;echo p;echo 2;echo;echo;echo w) | fdisk /dev/$1
        sync
        sync
        sync
        format_hdd ext4 ${1}1
        format_hdd ext4 ${1}2
    fi

}

init_newdrive()
{
    for KNAME in `ls $DIRP/`; do
        if [ -d "$DIRP/$KNAME/update"  ]; then
            echo "init_newdrive - Found update folder in $DIRP/$KNAME"
            update_images=`find $DIRP/$KNAME/update -name "MyPassportWirelessGen2*.bin"`
            for update_image in $update_images; do
                if [ -f "$DIRP/$KNAME/update/MyNewDrive"  ]; then
                    echo "init_newdrive - Found MyNewDrive flag in folder $DIRP/$KNAME/update"
                    check_def_HWcollect_part $HiddenV1
                    check_knl_part $HiddenV2
                    check_sys_part $HiddenV3
                    mount /dev/${HiddenV1}1 /opt
                    cp $update_image /opt/
                    sync
                    sync
                    sync
                    umount /opt/
                    return 0
                fi
            done
        fi
    done
}

[ ! -d "$DIRP" ] && mkdir "$DIRP"
[ ! -d "$DIRH" ] && mkdir "$DIRH"

probe_hdd
init_newdrive
check_recoveryFW_version
mount /dev/${HiddenV2}1 /mnt
mkdir -p /hwcollect
mount /dev/${HiddenV1}2 /hwcollect
/usr/local/sbin/sendHWCollect.sh 107 `cat /proc/uptime | cut -d " " -f 1`

[ -f /mnt/saveconfigfiles.tar ] && cp /mnt/saveconfigfiles.tar /etc/
if [ -f /mnt/rescuetotalfw.bin ]; then
    echo "rescuetotalfw.bin found"
    mcu_version2x=`cat /tmp/MCU_Version | grep "2." | wc -l`
    mcu_version301=`cat /tmp/MCU_Version | grep "3.01" | wc -l`
    if [ ${mcu_version2x} -eq 1 ] || [ ${mcu_version301} ]; then
        echo "24;0;" > /tmp/MCU_Cmd
        echo "17;1;" > /tmp/MCU_Cmd
    fi
    UserDisk=`cat /tmp/HDDDevNode`
    md5sum /mnt/rescuetotalfw.bin
    upgrade /mnt/rescuetotalfw.bin && rm -f /mnt/rescuetotalfw.bin
    if [ -f $DIRH/$UserDisk/.wdcache/rescuetotalfw.bin ]; then
        md5sum $DIRH/$UserDisk/.wdcache/rescuetotalfw.bin
        upgrade $DIRH/$UserDisk/.wdcache/rescuetotalfw.bin && rm -f $DIRH/$UserDisk/.wdcache/rescuetotalfw.bin
    fi
    touch /tmp/.upgrading && exit
fi

#Going to Recovery Mode
echo "24;0;" > /tmp/MCU_Cmd
echo "17;1;" > /tmp/MCU_Cmd
if [ -f /tmp/HDDDevNode ]; then
    UserDisk=`cat /tmp/HDDDevNode`
    if [ -f "$DIRH/$UserDisk/.wdcache/MyPassportWirelessGen2.bin" ]; then
        echo "Cache FW found"
        rm -f /etc/saveconfigfiles.tar /mnt/saveconfigfiles.tar
		/usr/local/sbin/sendHWCollect.sh 102 RecoveryCache Start `cat /etc/version`
        sync
        upgrade $DIRH/$UserDisk/.wdcache/MyPassportWirelessGen2.bin && touch /tmp/.upgrading && exit
    fi
fi

mount /dev/${HiddenV1}1 /opt

while [ ! -f /tmp/.upgrading ]; do
    for KNAME in `ls $DIRP/`; do
        if [ -d "$DIRP/$KNAME/update"  ]; then
            echo "Found update folder in $DIRP/$KNAME"
            update_images=`find $DIRP/$KNAME/update -name "MyPassportWirelessGen2*.bin"`
            for update_image in $update_images; do
            	
            	
                if [ "$KNAME" == "SDcard" ]; then
                    /usr/local/sbin/sendHWCollect.sh 102 RecoverySDCard Start `cat /etc/version`
                else
                    /usr/local/sbin/sendHWCollect.sh 102 RecoveryUSB Start `cat /etc/version`
                fi
                upgrade $update_image && touch /tmp/.upgrading && exit
            done
        fi
    done
    
    for KNAME in `ls $DIRH/`; do
        if [ -d "$DIRH/$KNAME/update"  ]; then
            echo "Found update folder in $DIRH/$KNAME"
            update_images=`find $DIRH/$KNAME/update -name "MyPassportWirelessGen2*.bin"`
            for update_image in $update_images; do
                /usr/local/sbin/sendHWCollect.sh 102 RecoveryHDD Start `cat /etc/version`
                upgrade $update_image && touch /tmp/.upgrading && exit
            done
        fi
    done

    if [ -d "/opt" ]; then #Internal recovery image
            update_images=`find /opt/ -name "MyPassportWirelessGen2*.bin"`
            for update_image in $update_images; do
                /usr/local/sbin/sendHWCollect.sh 102 RecoveryDefaultFW Start `cat /etc/version`
                upgrade $update_image && touch /tmp/.upgrading && exit
            done
    fi

    sleep 1
done

